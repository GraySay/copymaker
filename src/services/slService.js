// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Subject Line —Ñ–∞–π–ª–∞–º–∏

class SLService {
  constructor(googleDriveService) {
    this.googleDriveService = googleDriveService;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ SL (–∏—Å–ø–æ–ª—å–∑—É–µ–º overlay)
  showSLNotification(message, type = 'info') {
    const overlay = document.getElementById('notificationOverlay');
    if (!overlay) {
      console.error('Notification overlay not found');
      return;
    }

    const notificationDiv = document.createElement('div');
    notificationDiv.className = type === 'warning' ? 'error' : 'success';
    notificationDiv.innerHTML = '<i class="fas fa-' + (type === 'warning' ? 'exclamation-triangle' : 'info-circle') + '"></i> ' + message;
    
    overlay.appendChild(notificationDiv);
    
    setTimeout(() => {
      notificationDiv.classList.add('fade-out');
      setTimeout(() => {
        if (notificationDiv.parentNode) {
          notificationDiv.parentNode.removeChild(notificationDiv);
        }
      }, 300);
    }, type === 'warning' ? 5000 : 3000);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ SL —Ñ–∞–π–ª–∞
  showSLLoadedIndicator(fileName) {
    const indicator = document.getElementById('slLoadedIndicator');
    const textSpan = document.getElementById('slLoadedText');
    
    if (indicator && textSpan) {
      textSpan.textContent = `SL Loaded: ${fileName}`;
      indicator.style.display = 'block';
    }
  }

  // –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ SL —Ñ–∞–π–ª–∞
  hideSLLoadedIndicator() {
    const indicator = document.getElementById('slLoadedIndicator');
    if (indicator) {
      indicator.style.display = 'none';
    }
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å SL —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Google Drive Picker
  async loadSLFromGoogleDrive() {
    try {
      await this.googleDriveService.loadGoogleAPIs();
      await this.googleDriveService.initializeGoogleAPIs();
      const accessToken = await this.googleDriveService.authenticate();
      
      // –°–æ–∑–¥–∞—Ç—å picker —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –¥–ª—è SL —Ñ–∞–π–ª–æ–≤
      const selectedFile = await this.createSLPicker(accessToken);
      
              if (selectedFile) {
        const content = await this.downloadAndExtractSLContent(selectedFile, accessToken);
        
        if (content) {
          // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
          if (window.slEditor) {
            window.slEditor.setValue(content);
          }
          this.showSLNotification('SL —Ñ–∞–π–ª "' + selectedFile.name + '" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω', 'info');
          this.showSLLoadedIndicator(selectedFile.name);
          

          
          // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏
          if (window.app && window.app.historyService) {
            window.app.historyService.updateCurrentSLFile(selectedFile.name);
          }
          
          return content;
        }
      } else {
        this.showSLNotification('SL —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', 'warning');
      }
    } catch (error) {
      console.error('Error loading SL from Google Drive:', error);
      
      let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      if (error && error.message) {
        errorMessage = error.message;
      } else if (typeof error === 'string') {
        errorMessage = error;
      }
      
      this.showSLNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SL: ' + errorMessage, 'warning');
      
      // –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (error.status === 401 || error.status === 403 || error.error === 'access_denied') {
        this.googleDriveService.clearCachedToken();
      }
    }
  }

  // –°–æ–∑–¥–∞—Ç—å Google Drive Picker –¥–ª—è SL —Ñ–∞–π–ª–æ–≤
  async createSLPicker(accessToken) {
    return new Promise((resolve, reject) => {
      try {
        if (!this.googleDriveService.google || !this.googleDriveService.google.picker) {
          reject(new Error('Google Picker API not loaded'));
          return;
        }
        
        if (!accessToken) {
          reject(new Error('No access token provided'));
          return;
        }
        
        // –°–æ–∑–¥–∞—Ç—å view –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (Word, Google Docs, —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã)
        const docsView = new this.googleDriveService.google.picker.DocsView(this.googleDriveService.google.picker.ViewId.DOCS)
          .setIncludeFolders(true)
          .setSelectFolderEnabled(false);
        
        const pickerBuilder = new this.googleDriveService.google.picker.PickerBuilder()
          .addView(docsView)
          .setOAuthToken(accessToken)
          .setTitle('–í—ã–±–µ—Ä–∏—Ç–µ SL —Ñ–∞–π–ª (.docx, .txt –∏–ª–∏ Google Docs)')
          .setCallback((data) => {
            try {
              
              if (data.action === this.googleDriveService.google.picker.Action.PICKED) {
                const file = data.docs[0];
                
                // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —ç—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª
                if (this.isSLFileSupported(file)) {
                  resolve(file);
                } else {
                  this.showSLNotification('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ' + file.name + '. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .docx, .txt —Ñ–∞–π–ª—ã –∏–ª–∏ Google Docs', 'warning');
                  resolve(null);
                }
              } else if (data.action === this.googleDriveService.google.picker.Action.CANCEL) {
                console.log('SL Picker cancelled');
                resolve(null);
              }
            } catch (callbackError) {
              console.error('Error in SL picker callback:', callbackError);
              reject(callbackError);
            }
          });
        
        // –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –¥–æ–±–∞–≤–∏—Ç—å developer key
        try {
          pickerBuilder.setDeveloperKey(this.googleDriveService.config.API_KEY);
        } catch (keyError) {
          console.warn('Could not set developer key:', keyError);
        }
        
        const picker = pickerBuilder.build();
        picker.setVisible(true);
        
      } catch (error) {
        console.error('Error creating SL picker:', error);
        reject(error);
      }
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ñ–∞–π–ª –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è SL
  isSLFileSupported(file) {
    const supportedMimeTypes = [
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document', // .docx
      'text/plain', // .txt
      'application/vnd.google-apps.document' // Google Docs
    ];
    
    if (supportedMimeTypes.includes(file.mimeType)) {
      return true;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
    const fileName = file.name.toLowerCase();
    if (fileName.endsWith('.docx') || fileName.endsWith('.txt')) {
      return true;
    }
    
    return false;
  }

  // –°–∫–∞—á–∞—Ç—å –∏ –∏–∑–≤–ª–µ—á—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ SL —Ñ–∞–π–ª–∞
  async downloadAndExtractSLContent(slFile, accessToken) {
    try {
      console.log('Downloading SL file:', slFile);
      
      if (!accessToken) {
        throw new Error('–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
      }
      
      // –°–∫–∞—á–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
      let response;
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª Google Docs
      if (slFile.mimeType === 'application/vnd.google-apps.document') {
        // –î–ª—è Google Docs —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        response = await fetch('https://www.googleapis.com/drive/v3/files/' + slFile.id + '/export?mimeType=text/plain', {
          headers: {
            'Authorization': 'Bearer ' + accessToken
          }
        });
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        response = await fetch('https://www.googleapis.com/drive/v3/files/' + slFile.id + '?alt=media', {
          headers: {
            'Authorization': 'Bearer ' + accessToken
          }
        });
      }
      
      if (!response.ok) {
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω
        if (response.status === 401 || response.status === 403) {
          console.log('üîÑ –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º –∫–µ—à...');
          if (this.googleDriveService) {
            this.googleDriveService.clearCachedToken();
          }
        }
        throw new Error('HTTP ' + response.status + ': ' + response.statusText);
      }
      

      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
      let slContent = '';
      
      if (slFile.mimeType === 'application/vnd.google-apps.document') {
        // Google Docs - —É–∂–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Ç–µ–∫—Å—Ç
        slContent = await response.text();
      } else {
        const fileName = slFile.name.toLowerCase();
        
        if (fileName.endsWith('.txt')) {
          // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
          slContent = await response.text();
        } else if (fileName.endsWith('.docx')) {
          // DOCX —Ñ–∞–π–ª - –ø—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ mammoth.js
          try {
            const arrayBuffer = await response.arrayBuffer();
            if (window.mammoth) {
              const result = await window.mammoth.extractRawText({ arrayBuffer });
              slContent = result.value.trim();
            } else {
              throw new Error('Mammoth.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            }
          } catch (docxError) {
            throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ DOCX: ${docxError.message}`);
          }
        } else {
          // –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç
          try {
            slContent = await response.text();
          } catch (textError) {
            throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ' + slFile.name + '. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è .docx, .txt —Ñ–∞–π–ª—ã –∏ Google Docs.');
          }
        }
      }
      
      slContent = slContent.trim();
      
      if (slContent) {
        return slContent;
      } else {
        throw new Error('SL —Ñ–∞–π–ª "' + slFile.name + '" –ø—É—Å—Ç');
      }
      
    } catch (error) {
      console.error('Error downloading SL file:', error);
      throw error;
    }
  }

  // === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ò–°–ö SL –§–ê–ô–õ–û–í ===

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ SL —Ñ–∞–π–ª–∞ –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ —á—Ç–æ –∏ HTML —Ñ–∞–π–ª
  async searchAndLoadSLAutomatically(htmlFile, accessToken) {
    try {
      
      // –ò–∑–≤–ª–µ—á—å –±–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
      const baseName = this.extractBaseName(htmlFile.name);
      
      // –ü–æ–ª—É—á–∏—Ç—å ID –ø–∞–ø–∫–∏ –≥–¥–µ –ª–µ–∂–∏—Ç HTML —Ñ–∞–π–ª –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      console.log('üì° –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ HTML —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏...');
      const folderId = await this.getParentFolderId(htmlFile.id, accessToken);
      
      if (!folderId) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–ø–∫—É HTML —Ñ–∞–π–ª–∞');
        this.showSLNotification('SL –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω', 'warning');
        return null;
      }
      
      console.log('üìÅ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ SL –≤ –ø–∞–ø–∫–µ:', folderId);
      
      // –ü–æ–∏—Å–∫ SL —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ (–±–µ–∑ –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
      let slFile = await this.findSLFileInFolder(folderId, baseName, accessToken);
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞–∫ fallback
      if (!slFile) {
        console.log('üåç Fallback: –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ SL —Ñ–∞–π–ª–æ–≤...');
        slFile = await this.findSLFileGlobally(baseName, accessToken);
      }
      
      if (slFile) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω SL —Ñ–∞–π–ª:', slFile.name);
        const content = await this.downloadAndExtractSLContent(slFile, accessToken);
        
        if (content && window.slEditor) {
          window.slEditor.setValue(content);
          this.showSLNotification(`SL —Ñ–∞–π–ª "${slFile.name}" –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω`, 'info');
          this.showSLLoadedIndicator(slFile.name);
          

          
          // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏
          if (window.app && window.app.historyService) {
            window.app.historyService.updateCurrentSLFile(slFile.name);
          }
          
          return content;
        }
      } else {
        console.log('‚ö†Ô∏è SL —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        this.showSLNotification('SL –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω', 'warning');
      }
      
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ SL:', error);
      this.showSLNotification('SL –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω', 'warning');
      return null;
    }
  }

  // –ò–∑–≤–ª–µ—á—å –±–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ SL
  extractBaseName(fileName) {
    // –£–±—Ä–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ (.html, .htm)
    let baseName = fileName.replace(/\.(html|htm)$/i, '');
    
    // –£–±—Ä–∞—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ _html, -html
    baseName = baseName.replace(/[_-]html$/i, '');
    
    // –ò–∑–≤–ª–µ—á—å –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—É—é —á–∞—Å—Ç—å (ABC3, XYZ5, etc.)
    const match = baseName.match(/([A-Za-z]+\d*)/);
    const extracted = match ? match[1] : baseName;
    
    console.log(`üìã –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ: "${fileName}" ‚Üí "${baseName}" ‚Üí "${extracted}"`);
    return extracted;
  }

  // –ü–æ–ª—É—á–∏—Ç—å ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏ —Ñ–∞–π–ª–∞
  async getParentFolderId(fileId, accessToken) {
    try {
      console.log('üì° –ó–∞–ø—Ä–æ—Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–∫–∏:', fileId);
      
      const url = `https://www.googleapis.com/drive/v3/files/${fileId}?fields=parents&supportsAllDrives=true&access_token=${accessToken}`;
      console.log('üì° URL –∑–∞–ø—Ä–æ—Å–∞:', url);
      
      const response = await fetch(url);
      
      if (response.ok) {
        const data = await response.json();
        console.log('üì• –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞:', data);
        
        const parentId = data.parents && data.parents.length > 0 ? data.parents[0] : null;
        console.log('üìÅ ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏:', parentId);
        return parentId;
      } else {
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω
        if (response.status === 401 || response.status === 403) {
          console.log('üîÑ –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º –∫–µ—à...');
          if (this.googleDriveService) {
            this.googleDriveService.clearCachedToken();
          }
        }
        const errorText = await response.text();
        console.error('‚ùå API –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', response.status, errorText);
        return null;
      }
    } catch (error) {
      console.error('‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error.message);
      return null;
    }
  }

  // –ù–∞–π—Ç–∏ SL —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫)
  async findSLFileInFolder(folderId, baseName, accessToken) {
    try {
      console.log('üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ SL —Ñ–∞–π–ª–æ–≤...');
      
      // –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö SL –≤ –ø–∞–ø–∫–µ
      const searchUrl = `https://www.googleapis.com/drive/v3/files?q=${encodeURIComponent(`name contains 'SL' and '${folderId}' in parents`)}&includeItemsFromAllDrives=true&supportsAllDrives=true&access_token=${accessToken}`;
      console.log('üì° –ï–¥–∏–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å SL —Ñ–∞–π–ª–æ–≤');
      
      const response = await fetch(searchUrl);
      
      if (response.ok) {
        const data = await response.json();
        console.log('üì• –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å SL:', data.files ? data.files.length : 0);
        
        if (data.files && data.files.length > 0) {
          console.log('üìÑ –í—Å–µ SL —Ñ–∞–π–ª—ã:', data.files.map(f => f.name));
          
          // –ù–∞–π—Ç–∏ —Ñ–∞–π–ª —Å –ª—É—á—à–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö SL —Ñ–∞–π–ª–æ–≤
          const bestMatch = this.findBestSLMatch(data.files, baseName);
          if (bestMatch) {
            console.log('üèÜ –õ—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:', bestMatch.name);
            return bestMatch;
          }
        } else {
          console.log('üì≠ –ù–µ—Ç SL —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ');
        }
      } else {
        const errorText = await response.text();
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', response.status, errorText);
      }
      
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–ø–∫–µ:', error);
      return null;
    }
  }

  // –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∏—Å–∫–∞ SL —Ñ–∞–π–ª–æ–≤
  buildSLSearchPatterns(baseName) {
    const patterns = [];
    
    console.log('üî§ –°—Ç—Ä–æ–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏:', baseName);
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π SL —Ñ–∞–π–ª–æ–≤
    const variations = [
      `${baseName} SL`,      // AMDT5 SL
      `${baseName}_SL`,      // AMDT5_SL
      `${baseName}-SL`,      // AMDT5-SL
      `${baseName}SL`,       // AMDT5SL
      `${baseName} sl`,      // AMDT5 sl (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)
      `${baseName}_sl`,      // AMDT5_sl
      `${baseName}-sl`,      // AMDT5-sl
      `${baseName}sl`        // AMDT5sl
    ];
    
    // –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ (AMDT5 ‚Üí AMDT 5)
    if (/[A-Za-z]\d/.test(baseName)) {
      const spaced = baseName.replace(/([A-Za-z])(\d)/g, '$1 $2');
      variations.push(
        `${spaced} SL`,        // AMDT 5 SL
        `${spaced}_SL`,        // AMDT 5_SL
        `${spaced}-SL`,        // AMDT 5-SL
        `${spaced} sl`         // AMDT 5 sl
      );
      console.log('üî§ –î–æ–±–∞–≤–ª–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏:', spaced);
    }
    
    console.log('üìù –í—Å–µ –≤–∞—Ä–∏–∞—Ü–∏–∏:', variations);
    
    // –°–æ–∑–¥–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã - –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã
    for (const variation of variations) {
      // –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫
      patterns.push(`name contains '${variation}'`);
      
      // –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –±–∞–∑–æ–≤–æ–º—É –∏–º–µ–Ω–∏ + SL
      if (variation.includes(' SL') || variation.includes('_SL') || variation.includes('-SL')) {
        patterns.push(`name contains '${baseName}' and name contains 'SL'`);
        patterns.push(`name contains '${baseName}' and name contains 'sl'`);
      }
    }
    
    // –î–æ–±–∞–≤–∏–º –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    patterns.push(`name contains '${baseName}'`);
    patterns.push(`name contains 'SL'`);
    
    console.log('üîç –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–ø–µ—Ä–≤—ã–µ 5):', patterns.slice(0, 5));
    return patterns;
  }

  // –ù–∞–π—Ç–∏ –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  findBestSLMatch(files, baseName) {
    let bestMatch = null;
    let bestScore = 0;
    
    for (const file of files) {
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ñ–∞–π–ª –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
      if (this.isSLFileSupported(file)) {
        const score = this.calculateSLMatchScore(file.name, baseName);
        console.log(`üìä –û—Ü–µ–Ω–∫–∞ "${file.name}": ${score} –±–∞–ª–ª–æ–≤`);
        
        if (score > bestScore) {
          bestScore = score;
          bestMatch = file;
        }
      } else {
        console.log(`‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${file.name}`);
      }
    }
    
    if (bestMatch) {
      console.log(`üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "${bestMatch.name}" —Å ${bestScore} –±–∞–ª–ª–∞–º–∏`);
    }
    
    return bestMatch;
  }



  // –í—ã—á–∏—Å–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
  calculateSLMatchScore(fileName, baseName) {
    const lowerFileName = fileName.toLowerCase();
    const lowerBaseName = baseName.toLowerCase();
    
    let score = 0;
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
    if (lowerFileName.includes(lowerBaseName)) {
      score += 10;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ 'sl'
    if (lowerFileName.includes('sl')) {
      score += 5;
    }
    
    // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    const exactPatterns = [
      `${lowerBaseName} sl`,
      `${lowerBaseName}_sl`,
      `${lowerBaseName}-sl`,
      `${lowerBaseName}sl`
    ];
    
    for (const pattern of exactPatterns) {
      if (lowerFileName.includes(pattern)) {
        score += 15;
        break;
      }
    }
    
    return score;
  }

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ SL —Ñ–∞–π–ª–æ–≤ (fallback)
  async findSLFileGlobally(baseName, accessToken) {
    try {
      const searchQueries = this.buildSLSearchPatterns(baseName);
      console.log('üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∏—Å–∫–∞:', searchQueries.slice(0, 3)); // –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–º—Å—è –ø–µ—Ä–≤—ã–º–∏ 3 –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
      for (const query of searchQueries.slice(0, 3)) {
        console.log('üîé –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É:', query);
        
        const searchUrl = `https://www.googleapis.com/drive/v3/files?q=${encodeURIComponent(query)}&includeItemsFromAllDrives=true&supportsAllDrives=true&access_token=${accessToken}`;
        
        const response = await fetch(searchUrl);
        
        if (response.ok) {
          const data = await response.json();
          
          if (data.files && data.files.length > 0) {
            console.log('üåç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≥–ª–æ–±–∞–ª—å–Ω–æ:', data.files.map(f => f.name));
            
            // –ù–∞–π—Ç–∏ —Ñ–∞–π–ª —Å –ª—É—á—à–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
            const bestMatch = this.findBestSLMatch(data.files, baseName);
            if (bestMatch) {
              console.log('üèÜ –õ—É—á—à–µ–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:', bestMatch.name);
              return bestMatch;
            }
          }
        } else {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', response.status);
        }
      }
      
      console.log('‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
      return null;
    }
  }

  // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
  async debugFolderContents(folderId, accessToken) {
    try {
      console.log('üîç –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ...');
      
      const url = `https://www.googleapis.com/drive/v3/files?q='${folderId}' in parents&fields=files(id,name,mimeType)&includeItemsFromAllDrives=true&supportsAllDrives=true&access_token=${accessToken}`;
      console.log('üì° URL –æ—Ç–ª–∞–¥–∫–∏ –ø–∞–ø–∫–∏:', url);
      
      const response = await fetch(url);
      
      if (response.ok) {
        const data = await response.json();
        console.log('üìÇ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ:', data.files ? data.files.length : 0);
        
        if (data.files && data.files.length > 0) {
          console.log('üìÑ –í—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ:');
          data.files.forEach((file, index) => {
            console.log(`  ${index + 1}. "${file.name}" (${file.mimeType})`);
          });
          
          // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç SL
          const slFiles = data.files.filter(f => 
            f.name.toLowerCase().includes('sl') || 
            f.name.toLowerCase().includes('subject')
          );
          
          if (slFiles.length > 0) {
            console.log('üéØ –§–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "SL" –∏–ª–∏ "subject":');
            slFiles.forEach(file => {
              console.log(`  üìÑ "${file.name}" (${file.mimeType})`);
            });
          } else {
            console.log('‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö "SL" –∏–ª–∏ "subject"');
          }
        } else {
          console.log('üì≠ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
        }
      } else {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏:', response.status);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –ø–∞–ø–∫–∏:', error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.SLService = SLService;
