// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Drive API

class GoogleDriveService {
  constructor() {
    this.gapi = null;
    this.google = null;
    this.pickerApiLoaded = false;
    this.cachedAccessToken = null;
    this.tokenExpirationTime = null;
    this.config = window.CONFIG?.GOOGLE || {};

    
    this.loadCachedToken();
    
    // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    this.startTokenValidationTimer();
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (–æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  loadCachedToken() {
    // –¢–æ–∫–µ–Ω –Ω–µ –∫—ç—à–∏—Ä—É–µ—Ç—Å—è - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    this.cachedAccessToken = null;
    this.tokenExpirationTime = null;
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –∫—ç—à (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
  saveCachedToken() {
    // –¢–æ–∫–µ–Ω –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
  clearCachedToken() {
    try {
      this.cachedAccessToken = null;
      this.tokenExpirationTime = null;
      AppUtils.removeFromStorage('googleDrive.accessToken');
      AppUtils.removeFromStorage('googleDrive.tokenExpiration');
      
      // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
      if (typeof window !== 'undefined' && window.app && window.app.updateGoogleDriveStatus) {
        setTimeout(() => window.app.updateGoogleDriveStatus(), 100);
      }
      
      // –ù–ï –æ—á–∏—â–∞–µ–º SL –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä - –æ–Ω –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –¥–∞–∂–µ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–∞
      // SL –∫–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    } catch (error) {
      console.error('Error clearing cached token:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
  hasValidToken() {
    try {
      const hasToken = !!this.cachedAccessToken;
      console.log('Token check:', { hasToken });
      return hasToken;
    } catch (error) {
      console.error('Error checking token validity:', error);
      this.clearCachedToken();
      return false;
    }
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å Google APIs
  async loadGoogleAPIs() {
    return new Promise((resolve, reject) => {
      if (window.gapi && window.google && this.pickerApiLoaded) {
        this.gapi = window.gapi;
        this.google = window.google;
        resolve();
        return;
      }
      
      const script1 = document.createElement('script');
      script1.src = 'https://apis.google.com/js/api.js';
      script1.onload = () => {
        const script2 = document.createElement('script');
        script2.src = 'https://accounts.google.com/gsi/client';
        script2.onload = () => {
          const script3 = document.createElement('script');
          script3.src = 'https://apis.google.com/js/picker.js';
          script3.onload = () => {
            this.gapi = window.gapi;
            this.google = window.google;
            this.pickerApiLoaded = true;
            resolve();
          };
          script3.onerror = reject;
          document.head.appendChild(script3);
        };
        script2.onerror = reject;
        document.head.appendChild(script2);
      };
      script1.onerror = reject;
      document.head.appendChild(script1);
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google APIs
  async initializeGoogleAPIs() {
    return new Promise((resolve, reject) => {
      this.gapi.load('client:picker', async () => {
        try {
          await this.gapi.client.init({
            apiKey: this.config.API_KEY,
            discoveryDocs: [this.config.DISCOVERY_DOC],
          });
          
          console.log('Google Drive API initialized successfully');
          resolve();
        } catch (error) {
          console.error('Error initializing Google APIs:', error);
          reject(error);
        }
      });
    });
  }

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å Google
  async authenticate() {
    return new Promise((resolve, reject) => {
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
      if (this.hasValidToken()) {
        resolve(this.cachedAccessToken);
        return;
      }
      
      const tokenClient = this.google.accounts.oauth2.initTokenClient({
        client_id: this.config.CLIENT_ID,
        scope: this.config.SCOPES,
        callback: (response) => {
          if (response.error !== undefined) {
            console.error('Authentication error:', response);
            reject(new Error(response.error_description || response.error));
          } else {
            // –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω (–±–µ–∑ —Ç–∞–π–º–µ—Ä–∞)
            this.cachedAccessToken = response.access_token;
            
            this.saveCachedToken();
            
            console.log('Token cached successfully');
            
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            if (typeof window !== 'undefined' && window.app && window.app.updateGoogleDriveStatus) {
              setTimeout(() => window.app.updateGoogleDriveStatus(), 100);
            }
            
            resolve(response.access_token);
          }
        },
      });
      tokenClient.requestAccessToken();
    });
  }

  // –°–æ–∑–¥–∞—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å Google Drive Picker
  async createPicker(accessToken) {
    return new Promise((resolve, reject) => {
      try {
        if (!this.google || !this.google.picker) {
          reject(new Error('Google Picker API not loaded'));
          return;
        }
        
        if (!accessToken) {
          reject(new Error('No access token provided'));
          return;
        }
        
        const docsView = new this.google.picker.DocsView(this.google.picker.ViewId.DOCS)
          .setIncludeFolders(true);
        
        const pickerBuilder = new this.google.picker.PickerBuilder()
          .addView(docsView)
          .setOAuthToken(accessToken)
          .setCallback((data) => {
            try {
              console.log('Picker callback:', data);
              
              if (data.action === this.google.picker.Action.PICKED) {
                const file = data.docs[0];
                console.log('Selected file:', file);
                resolve(file);
              } else if (data.action === this.google.picker.Action.CANCEL) {
                console.log('Picker cancelled');
                resolve(null);
              }
            } catch (callbackError) {
              console.error('Error in picker callback:', callbackError);
              reject(callbackError);
            }
          });
        
        // –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –¥–æ–±–∞–≤–∏—Ç—å developer key
        try {
          pickerBuilder.setDeveloperKey(this.config.API_KEY);
        } catch (keyError) {
          console.warn('Could not set developer key:', keyError);
        }
        
        const picker = pickerBuilder.build();
        picker.setVisible(true);
        
      } catch (error) {
        console.error('Error creating picker:', error);
        reject(error);
      }
    });
  }

  // –°–∫–∞—á–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
  async downloadFileContent(fileId) {
    try {
      const response = await this.gapi.client.drive.files.get({
        fileId: fileId,
        alt: 'media'
      });
      return response.body;
    } catch (error) {
      console.error('Error downloading file:', error);
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
      if (error.status === 401 || error.status === 403) {
        console.log('Token expired or invalid, clearing cache');
        this.clearCachedToken();
      }
      
      throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  }



  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–±–µ–∑ —Ç–∞–π–º–µ—Ä–∞)
  getConnectionStatus() {
    if (this.hasValidToken()) {
      return {
        connected: true,
        text: '‚úì –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
        color: '#38a169'
      };
    } else {
      return {
        connected: false,
        text: '‚óã –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        color: '#666'
      };
    }
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞
  startTokenValidationTimer() {
    // –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–æ–∫–µ–Ω –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    setInterval(() => {
      this.validateTokenPeriodically();
    }, 60000); // 60 —Å–µ–∫—É–Ω–¥
  }



  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API
  async validateTokenPeriodically() {

    if (this.cachedAccessToken) {
      console.log('üîç –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API...');
      
      try {
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–æ–∫–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–º API –∑–∞–ø—Ä–æ—Å–æ–º
        const response = await fetch(`https://www.googleapis.com/drive/v3/about?fields=user&access_token=${this.cachedAccessToken}`);
        
        if (response.ok) {
          console.log('‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
        } else {
          console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - –æ—á–∏—â–∞–µ–º –∏ —Ç—Ä–µ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
          this.clearCachedToken();
          
          // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
          if (typeof window !== 'undefined' && window.app && window.app.updateGoogleDriveStatus) {
            window.app.updateGoogleDriveStatus();
          }
        }
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error.message);
        this.clearCachedToken();
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        if (typeof window !== 'undefined' && window.app && window.app.updateGoogleDriveStatus) {
          window.app.updateGoogleDriveStatus();
        }
      }
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.GoogleDriveService = GoogleDriveService;
